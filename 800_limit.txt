@staticmethod
    # def possible_moves(mp, weight, a, b, lx, ly):
    def possible_moves(mp, weight, a, b):
        temp = []
        possible = False # has to have right or down
        energies = []
        up = (a, b - 1)
        #if (b - 1 != -1) and up != (lx, ly) and (up not in mp.path):
        if (b - 1 != -1) and (up not in mp.path):
            up_energy = weight(mp, (a, b), up)
            u = (up_energy, a, b - 1)
            temp.append(u)
            energies.append(up_energy)
        right = (a + 1, b)
        # if (a + 1 != mp.sx) and right != (lx, ly) and (right not in mp.path):
        if (a + 1 != mp.sx) and (right not in mp.path):
            possible = True
            right_energy = weight(mp, (a, b), right)
            r = (right_energy, a + 1, b)
            temp.append(r)
            energies.append(right_energy)
        down = (a, b + 1)
        # if (b + 1 != mp.sy) and down != (lx, ly) and (down not in mp.path):
        if (b + 1 != mp.sy) and (down not in mp.path):
            possible = True
            down_energy = weight(mp, (a, b), down)
            d = (down_energy, a, b + 1)
            temp.append(d)
            energies.append(down_energy)
        left = (a - 1, b)
        # if (a - 1 != -1) and left != (lx, ly) and (left not in mp.path):
        if (a - 1 != -1) and (left not in mp.path):
            left_energy = weight(mp, (a, b), left)
            l = (left_energy, a - 1, b)
            temp.append(l)
            energies.append(left_energy)
        # print (temp)
        # print (energies)
        if (possible == False):
            return []
        elif (len(temp) == 0) or (len(temp) == 1):
            return temp
        elif (len(temp) == 2):
            if(temp[0][0] <= temp[1][0]):
                return temp
            else:
                result = []
                result.append(temp[1])
                result.append(temp[0])
                return result
        else:
            first = min(energies)
            energies.remove(first)
            second = min(energies)
            # third = max(energies)
            result = []
            for i in temp:
                if (i[0] == first):
                    result.append(i)
                    temp.remove(i)
                    break
            if (temp[0][0] == second):
                result.append(temp[0])
                result.append(temp[1])
                return result
            else:
                result.append(temp[1])
                result.append(temp[0])
                return result